@using ManagementPortal.Client.Services
@using ManagementPortal.Shared.Dtos
@using ManagementPortal.Shared.Constants
@using System.Net.Http.Json
@using Dialogs
@using Microsoft.AspNetCore.Components.Authorization

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IStringLocalizer<AppLocalization> Loc
@inject IDialogService DialogService

<MudTable @ref="@_table"
          Items="@_rolesFiltered"
          Elevation="0"
          RowsPerPage="@_pageSize"
          Hover="true"
          Height="65vh"
          FixedFooter="true"
          Breakpoint="Breakpoint.Sm"
          Loading="_loading"
          LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mud-width-full">
            <MudTextField T="string"
                          ValueChanged="@(s=>OnSearch(s))"
                          Placeholder=@Loc["search"]
                          Adornment="Adornment.Start"
                          Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Style="width: 40%;"
                          Class="mt-0" />
            <AuthorizeView Roles="CreateRole">
                <MudButton @onclick="() => NavigateToCreateRole()">
                    <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Success" />
                    <MudText>
                        @Loc["createRoleUpper"]
                    </MudText>
                </MudButton>
            </AuthorizeView>
        </MudStack>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel T="ApplicationRoleDto"
                               SortDirectionChanged="SortByName">
                @Loc["nameField"]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudStack Row="true">
                @Loc["permissions"]
                @if (Product == Products.ManagementPortal)
                {
                    <MudStack Spacing="0">
                        <MudIconButton Size="Size.Small"
                                       Icon="@Icons.Material.Filled.FilterAlt"
                                       Color="@(_searchPermission.Id==0 ? Color.Default : Color.Info)"
                                       OnClick="@ToggleOpen" />
                        <MudPopover Open="@_openPopup" Fixed="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopLeft">
                            <MudStack Spacing="2">
                                <PermissionSelector Product="Product"
                                                    InitialPermissions="@(_searchPermission.Id==0
                                                    ? new List<ApplicationPermissionDto>()
                                                    : new List<ApplicationPermissionDto>{ _searchPermission })"
                                                    PermissionsSend="OnPermissionsSend" />
                                <MudButton OnClick="AcceptPermission"
                                           Color="Color.Default"
                                           Variant="Variant.Filled"
                                           Size="Size.Medium">@Loc["Accept"]</MudButton>
                            </MudStack>

                        </MudPopover>
                    </MudStack>
                }
            </MudStack>
        </MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr" Style="max-width: 200px; overflow-x: auto; white-space: nowrap;">@context.Name</MudTd>
        <MudTd>
            <MudContainer Style="max-height: 100px; overflow-y: auto">
                @if (context != null && context.Permissions != null)
                {
                    foreach (var permission in context.Permissions)
                    {
                        <MudChip T="string" 
                                 Color="@(permission.Id == _searchPermission.Id ? Color.Success : Color.Default)">
                            @permission.Name
                        </MudChip>
                    }
                }
            </MudContainer>
        </MudTd>
        <MudTd>
            <AuthorizeView Roles="EditRole" Context="roleContext">
                <MudIconButton Color="Color.Primary"
                               Size="Size.Small"
                               Icon="@Icons.Material.Filled.Edit"
                               OnClick="@(async() => NavigateToEditRole(context))" />
            </AuthorizeView>
        </MudTd>
        <MudTd>
            <AuthorizeView Roles="DeleteRole" Context="roleContext">
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error" Size="Size.Medium" OnClick="@(() => DeleteRole(context))" />
            </AuthorizeView>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudPagination SelectedChanged="PageChanged" Count="_pageCount" Class="pa-4" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public EventCallback<ApplicationRoleDto> RoleSend { get; set; }

    [Parameter]
    public Products Product { get; set; }

    private ApplicationRoleDto _activeRole = new();
    private ApplicationPermissionDto _searchPermission = new();
    private ConfirmActionDialog confirmActionDialog = new();
    private MudTable<ApplicationRoleDto> _table = new();
    private List<ApplicationRoleDto> _roles = new();
    private List<ApplicationRoleDto> _rolesFiltered = new();
    private int _currentPage { get; set; } = 1;
    private int _pageCount { get; set; }
    private int _pageSize { get; set; } = 5;
    private string _searchString = string.Empty;
    private Order _order = Order.Ascending;
    private SortFieldRole _sortField = SortFieldRole.Name;
    private bool _loading { get; set; } = true;
    public bool _openPopup;
    private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        await GetRoles(CancellationToken.None);
    }

    public void ToggleOpen()
    {
        if (_openPopup)
            _openPopup = false;
        else
            _openPopup = true;
    }

    private async Task OnInfoClick(ApplicationRoleDto role)
    {
        await RoleSend.InvokeAsync(role);
    }

    private async Task SortByName(SortDirection direction)
    {
        if (direction != SortDirection.None)
        {
            _order = direction == SortDirection.Ascending ? Order.Ascending : Order.Descending;
            _sortField = SortFieldRole.Name;
            await GetRoles(CancellationToken.None);
        }
    }

    private async Task GetRoles(CancellationToken cancellationToken)
    {
        _loading = true;
        string url = _searchString.Equals(string.Empty)
            ? $"api/Roles/?Product={Product}&CurrentPage={_currentPage}&PageSize={_pageSize}&searchPermission={_searchPermission.Id}&SortField={_sortField}&SortOrder={_order}"
            : $"api/Roles/?Product={Product}&CurrentPage={_currentPage}&PageSize={_pageSize}&searchPermission={_searchPermission.Id}&SortField={_sortField}&SortOrder={_order}&SearchText={_searchString}";


        var client = HttpClientFactory.CreateClient("CustomHttpClient");
        var response = await client.GetAsync(url, cancellationToken);

        try
        {
            if (response.IsSuccessStatusCode)
            {
                var rolePagination = await response.Content.ReadFromJsonAsync<RolePagination>();

                if (rolePagination?.Roles != null)
                {
                    var pageCount = (int)Math.Ceiling((decimal)rolePagination.TotalItems / _pageSize);

                    _roles = rolePagination.Roles;
                    _rolesFiltered = _roles;
                    _pageCount = pageCount;
                    _currentPage = rolePagination.CurrentPage;
                }
            }
            _loading = false;
            StateHasChanged();
        }
        catch (Exception) { };
    }

    private async Task PageChanged(int i)
    {
        _currentPage = i;
        await GetRoles(CancellationToken.None);
        _table.NavigateTo(i - 1);
    }

    private async Task DeleteRole(ApplicationRoleDto role)
    {
        _activeRole = role;
        string _msgConfirmDeleteRole = Loc["msgConfirmDeleteRole"];
        DialogParameters parameters = new DialogParameters
            {
                { "Message", _msgConfirmDeleteRole },
                { "Color", Color.Primary },
                { "Icon", Icons.Material.Filled.Warning },
                { "RedOk", true},
                { "CallBackOk", new EventCallback(this, ConfirmDeleteRole) }
            };

        DialogOptions _options = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
        var dialog = await DialogService.ShowAsync<ConfirmActionDialog>("", parameters, _options);

        if (dialog.Dialog != null)
        {
            confirmActionDialog = (ConfirmActionDialog)dialog.Dialog;
        }
    }

    private async Task ConfirmDeleteRole()
    {
        DialogParameters parametersDialog = new DialogParameters
            {
                { "Message", Loc["deletingRole"].Value },
                { "Waiting", true },
                { "CallBackOk", new EventCallback(this, ConfirmDeleteRole) }
            };

        confirmActionDialog.UpdateParameters(parametersDialog);

        var client = HttpClientFactory.CreateClient("CustomHttpClient");
        var response = await client.DeleteAsync($"api/Roles/{Product.ToString()}/{_activeRole.Id}");

        if (response.IsSuccessStatusCode)
        {
            string _msgRoleDeleted = Loc["successfulRoleDelete"];

            parametersDialog = new DialogParameters
            {
                { "Message", _msgRoleDeleted },
                { "Color", Color.Primary },
                { "Icon", Icons.Material.Filled.CheckCircleOutline },
                { "Waiting", false },
                { "CallBackOk", new EventCallback(this, () => confirmActionDialog.Close())}
            };

            confirmActionDialog.UpdateParameters(parametersDialog);

            _roles.Remove(_activeRole);
        }
        else
        {
            string _msgRoleNotDeleted = Loc["roleDeleteError"];

            parametersDialog = new DialogParameters
            {
                { "Message", _msgRoleNotDeleted },
                { "Color", Color.Primary },
                { "Icon", Icons.Material.Filled.Error },
                { "Waiting", false },
                { "CallBackOk", new EventCallback(this, () => confirmActionDialog.Close())}
            };

            confirmActionDialog.UpdateParameters(parametersDialog);
        }
    }

    private async Task OnSearch(string text)
    {
        _searchString = text;
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource = new CancellationTokenSource();
        var token = _cancellationTokenSource.Token;

        try
        {
            await GetRoles(token);
            _table.NavigateTo(0);
        }
        catch (Exception) { };
    }

    private void OnPermissionsSend(ApplicationPermissionDto permissionDto)
    {
        _searchPermission = permissionDto == null ? new() : permissionDto;
    }

    private async Task AcceptPermission()
    {
        _openPopup = false;
        await OnSearch(_searchString);
    }

    private void NavigateToCreateRole()
    {
        NavigationManager.NavigateTo("/create_role");
    }

    private void NavigateToEditRole(ApplicationRoleDto context)

    {
        _activeRole = context;
        NavigationManager.NavigateTo($"/edit_role/{Product}/{_activeRole.Name}");   
    }
}