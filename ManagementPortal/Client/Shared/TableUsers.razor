@using ManagementPortal.Shared.Dtos
@using ManagementPortal.Shared.Dtos.ResponseMessages
@using ManagementPortal.Shared.Constants
@using System.Net.Http.Json
@using Dialogs
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http;
@using System.Threading.Tasks;
@using System.Text.Json;
@using System.IdentityModel.Tokens.Jwt

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IStringLocalizer<AppLocalization> Loc
@inject IDialogService DialogService
@inject Services.CustomAuthStateProvider CustomAuthStateProvider

<MudTable @ref="@_table"
Items="@_usersFiltered"
Elevation="0"
RowsPerPage="@_pageSize"
Hover="true"
Height="65vh"
FixedFooter="true"
Breakpoint="Breakpoint.Sm"
Loading="_loading"
LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mud-width-full">
            <MudTextField T="string"
            ValueChanged="@(s=>OnSearch(s))"
            Placeholder=@Loc["search"]
            Immediate="true"
            Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search"
            IconSize="Size.Medium"
            Style="width: 40%"
            Class="mt-0" />
            <AuthorizeView Roles="CreateUser">
                <MudButton outlined="true" @onclick="() => NavigateToCreateUser()">
                    <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Success" />
                    <MudText>
                        @Loc["createUser"]
                    </MudText>
                </MudButton>
            </AuthorizeView>
        </MudStack>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel T="ApplicationUserDto"
            InitialDirection="SortDirection.Ascending"
            SortDirectionChanged="@((s) => SortByField(s, SortFieldUser.Username))">
                @Loc["usernameField"]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="ApplicationUserDto"
            InitialDirection="SortDirection.Ascending"
            SortDirectionChanged="@((s) => SortByField(s, SortFieldUser.Name))">
                @Loc["nameField"]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="ApplicationUserDto"
            InitialDirection="SortDirection.Ascending"
            SortDirectionChanged="@((s) => SortByField(s, SortFieldUser.LastName))">
                @Loc["lastNameField"]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="ApplicationUserDto"
            InitialDirection="SortDirection.Ascending"
            SortDirectionChanged="@((s) => SortByField(s, SortFieldUser.Email))">
                @Loc["emailField"]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="ApplicationUserDto"
            InitialDirection="SortDirection.Ascending"
            SortDirectionChanged="@((s) => SortByField(s, SortFieldUser.Status))">
                @Loc["active"]
                <MudStack Spacing="0">
                    <MudIconButton Size="Size.Small"
                    Icon="@Icons.Material.Filled.FilterAlt"
                    Color="@(_activeOption!=3 ? Color.Info : Color.Default)"
                    OnClick="@ToggleOpen" />
                </MudStack>
            </MudTableSortLabel>
            <MudPopover Open="@_openPopup" Fixed="true" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopLeft">
                <MudRadioGroup T="int" Value="_activeOption" ValueChanged="OnActiveOption" Class="pa-2">
                    <MudRadio Value="1" Color="Color.Primary" Size="Size.Small">Active</MudRadio>
                    <MudRadio Value="2" Color="Color.Primary" Size="Size.Small">Inactive</MudRadio>
                    <MudRadio Value="3" Color="Color.Primary" Size="Size.Small">All</MudRadio>
                </MudRadioGroup>
            </MudPopover>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="ApplicationUserDto"
            InitialDirection="SortDirection.Ascending"
            SortDirectionChanged="@((s) => SortByField(s, SortFieldUser.LastLogin))">
                @Loc["lastLogin"]
            </MudTableSortLabel>
        </MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Username" Style="max-width: 200px; overflow-x: auto; white-space: nowrap;">@context.UserName</MudTd>
        <MudTd DataLabel="Name" Style="max-width: 200px; overflow-x: auto; white-space: nowrap;">@context.Name</MudTd>

        <MudTd DataLabel="LastName" Style="max-width: 200px; overflow-x: auto; white-space: nowrap;">
            @context.LastName
        </MudTd>


        <MudTd DataLabel="Email" Style="max-width: 200px; overflow-x: auto; white-space: nowrap;">
            @context.Email
        </MudTd>
        <MudTd DataLabel="Active" Style="max-width: 200px; overflow-x: auto; white-space: nowrap;">
            @if (context.IsDeleted)
            {
                <MudChip T="string" Style="width: 100px;" Color="Color.Error">@Loc["deleted"]</MudChip>
            }
            else
            {
                <MudChip T="string" Style="width: 100px;" Color="Color.Success">@Loc["active"]</MudChip>
            }
        </MudTd>
        <MudTd DataLabel="LastLogin" Style="max-width: 200px; overflow-x: auto; white-space: nowrap;">
            @if (context.LastLoginDate == null)
            {
                <MudChip T="string" Color="Color.Info">Nuevo</MudChip>
            }
            else
            {
                <MudStack Row="true">
                    <MudIcon Icon="@Icons.Material.Filled.AccessTime" Title="LastLogin" />
                    <MudText Typo="Typo.caption">@context.LastLoginDate</MudText>
                </MudStack>
            }
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Info" Color="MudBlazor.Color.Info"
            Size="Size.Medium"
            OnClick="@(() => OnInfoClick(context))">
            </MudIconButton>
        </MudTd>
        <MudTd>
            <AuthorizeView Roles="EditUser" Context="roleContext">

                @if (!context.IsDeleted)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                    Size="Size.Medium" OnClick="@(() => OnEditClick(context))" />

                }
            </AuthorizeView>
        </MudTd>
        <MudTd>
            <AuthorizeView Roles="DeleteUser" Context="roleContext">
                @if (!context.IsDeleted && context.UserName != _loggedUsername)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                    Color="Color.Error" Size="Size.Medium" OnClick="@(() => DeleteUser(context,this.Product))" />
                }

            </AuthorizeView>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudPagination SelectedChanged="PageChanged" Count="_pageCount" Class="pa-4" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public Products Product { get; set; }

    private ConfirmActionDialog confirmActionDialog = new();
    private ApplicationUserDto _activeUser = new();
    private MudTable<ApplicationUserDto> _table = new();
    private List<ApplicationUserDto> _users = new();
    private List<ApplicationUserDto> _usersFiltered = new();

    private string _loggedUsername = string.Empty;
    private int _currentPage { get; set; } = 1;
    private int _pageCount { get; set; }
    private int _pageSize { get; set; } = 5;
    private string _searchString = string.Empty;
    private Order _order = Order.Ascending;
    private UserState _userState = UserState.Both;
    private SortFieldUser _sortField = SortFieldUser.Name;
    private bool _loading { get; set; } = true;
    public bool _openPopup;
    private int _activeOption { get; set; } = 3;
    private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await CustomAuthStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        _loggedUsername = user.Claims.FirstOrDefault(c => c.Type == JwtRegisteredClaimNames.UniqueName)?.Value ?? string.Empty;

        await GetUsers(CancellationToken.None);
    }

    public void ToggleOpen()
    {
        if (_openPopup)
            _openPopup = false;
        else
            _openPopup = true;
    }

    private async Task OnActiveOption(int value)
    {
        _activeOption = value;

        if (value == 3)
        {
            _userState = UserState.Both;
        }
        else if (value == 1)
        {
            _userState = UserState.Active;
        }
        else if (value == 2)
        {
            _userState = UserState.Deleted;
        }

        await GetUsers(CancellationToken.None);
    }

    private async Task SortByField(SortDirection direction, SortFieldUser sortField)
    {
        if (direction != SortDirection.None)
        {
            _order = direction == SortDirection.Ascending ? Order.Ascending : Order.Descending;
            _sortField = sortField;
            await GetUsers(CancellationToken.None);
        }
        else
        {
            _sortField = SortFieldUser.Name;
            _order = Order.Ascending;
            await GetUsers(CancellationToken.None);
        }
    }

    private async Task GetUsers(CancellationToken cancellationToken)
    {
        _loading = true;

        string url = _searchString.Equals(string.Empty)
            ? $"api/Users/?Product={Product}&CurrentPage={_currentPage}&PageSize={_pageSize}&SortField={_sortField}&SortOrder={_order}&State={_userState}"
            : $"api/Users/?Product={Product}&CurrentPage={_currentPage}&PageSize={_pageSize}&SortField={_sortField}&SortOrder={_order}&SearchText={_searchString}&State={_userState}";


        var client = HttpClientFactory.CreateClient("CustomHttpClient");
        var response = await client.GetAsync(url, cancellationToken);
        try
        {
            if (response.IsSuccessStatusCode)
            {
                var userPagination = await response.Content.ReadFromJsonAsync<UserPagination>();

                if (userPagination?.Users != null)
                {
                    var pageCount = (int)Math.Ceiling((decimal)userPagination.TotalItems / _pageSize);

                    _users = userPagination.Users;
                    _usersFiltered = _users;
                    _pageCount = pageCount;
                    _currentPage = userPagination.CurrentPage;
                }
            }
            StateHasChanged();
            _loading = false;
        }
        catch (Exception) { };
    }

    private void OnInfoClick(ApplicationUserDto user)
    {
        NavigationManager.NavigateTo($"/view_user/{user.UserName}?Product={Product}");
    }

    private void OnEditClick(ApplicationUserDto user)
    {
        NavigationManager.NavigateTo($"/edit_user/{user.UserName}?Product={Product}");
    }

    private async Task PageChanged(int i)
    {
        _currentPage = i;
        await GetUsers(CancellationToken.None);
        _table.NavigateTo(i - 1);
    }

    private async Task DeleteUser(ApplicationUserDto user, Products product)
    {
        string _msgConfirmDeleteUser;

        if (product == Products.ManagementPortal)
        {
            _msgConfirmDeleteUser = Loc["msgConfirmDeleteUserMP"]; // Accede a la traducción
        }
        else
        {
            string productName = product.ToString();
            _msgConfirmDeleteUser = $"{Loc["msgConfirmDeleteUserFrom"]} {productName}?";
        }

        _activeUser = user;
        DialogParameters parameters = new DialogParameters
            {
                { "Message", _msgConfirmDeleteUser},
                { "Color", Color.Primary },
                { "Icon", Icons.Material.Filled.Warning},
                { "CallBackOk", new EventCallback(this, ConfirmDeleteUser) },
                { "RedOk", true}
            };

        DialogOptions _options = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
        var dialog = await DialogService.ShowAsync<ConfirmActionDialog>("", parameters, _options);

        if (dialog.Dialog != null)
        {
            confirmActionDialog = (ConfirmActionDialog)dialog.Dialog;
        }
    }

    private async Task ConfirmDeleteUser()
    {
        string _msgDeletingUser = Loc["msgDeletingUser"];
        DialogParameters parametersDialog = new DialogParameters
            {
                { "Message", _msgDeletingUser },
                { "Waiting", true },
                { "ShowCancel", true },
                { "CallBackOk", new EventCallback(this, ConfirmDeleteUser) }
            };

        confirmActionDialog.UpdateParameters(parametersDialog);

        var client = HttpClientFactory.CreateClient("CustomHttpClient");
        var response = await client.DeleteAsync($"api/Users/{Product}/{_activeUser.UserName}");

        if (response.IsSuccessStatusCode)
        {
            string _msgSuccessfulDeletion;

            if (Product == Products.ManagementPortal)
            {
                _msgSuccessfulDeletion = Loc["msgSuccessfulDeletion"];
            }
            else 
            { 
                string productName = Product.ToString();
                _msgSuccessfulDeletion = $"{Loc["msgSuccessfulDeletionFrom"]} {productName}";
            }

            parametersDialog = new DialogParameters
            {
                { "Message", _msgSuccessfulDeletion },
                { "Color", Color.Primary },
                { "Icon", Icons.Material.Filled.CheckCircleOutline },
                { "Waiting", false },
                { "ShowCancel", false} ,
                { "RedOk", false},
                { "CallBackOk", new EventCallback(this, () => confirmActionDialog.Close())}
            };

            confirmActionDialog.UpdateParameters(parametersDialog);
            _activeUser.IsDeleted = true;
            _activeUser.Products = new List<ApplicationUserProductDto>();
        }
        else
        {
            string _msgErrorDeletion = Loc["msgErrorDeletion"];
            parametersDialog = new DialogParameters
            {
                { "Message", _msgErrorDeletion },
                { "Color", Color.Error },
                { "Icon", Icons.Material.Filled.Error },
                { "Waiting", false },
                { "CallBackOk", new EventCallback(this, () => confirmActionDialog.Close())}
            };

            confirmActionDialog.UpdateParameters(parametersDialog);
        }
    }

    private async Task OnSearch(string text)
    {
        _searchString = text;
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource = new CancellationTokenSource();
        var token = _cancellationTokenSource.Token;
        try
        {
            await GetUsers(token);
            _table.NavigateTo(0);
        }
        catch (Exception) { };
    }

    private void NavigateToCreateUser()
    {
        NavigationManager.NavigateTo("/create_user");
    }
}