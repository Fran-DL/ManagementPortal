@using ManagementPortal.Shared.Dtos
@using ManagementPortal.Shared.Constants
@using System.Net.Http.Json
@using Dialogs
@using Microsoft.AspNetCore.Components.Authorization


@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IStringLocalizer<AppLocalization> Loc
@inject IDialogService DialogService



    
    <MudTable @ref="@_table"
              Items="@_logsFiltered"
              Elevation="0"
              RowsPerPage="@_pageSize"
              Hover="true"
              Height="65vh"
              FixedFooter="true"
              Breakpoint="Breakpoint.Sm"
              Loading="_loading"
              LoadingProgressColor="Color.Info"
              FixedHeader="true">
    
   <ToolBarContent>
    <MudGrid>
            <MudItem xs="12" md="8" lg="6" class="d-flex align-items-center">
                <div class="d-flex align-items-center mr-2">
                    <MudDatePicker HelperText= "@Loc["startDate"]" DateFormat="dd.MM.yyyy"
                                   ShowToolbar="false" Editable="true" AutoClose="true" @ref="_startDatePicker"
                                   DateChanged="@((date) => OnDateOrTimeChanged(date , true))"
                                    label="DD.MM.YYYY">

                                   <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => ClearStartDateAndTime())">Clear</MudButton>
                                        <MudButton OnClick="@(() => _startDatePicker.CloseAsync(false))">@Loc["cancel"]</MudButton>
                                    </PickerActions>
                    </MudDatePicker>

                    <MudTimePicker HelperText = "@Loc["startTime"]" 
                                   Class="ml-2" TimeChanged="@((time) => OnDateOrTimeChanged(time ?? TimeSpan.Zero, true))"
                                   AutoClose="true" @ref="_startTimePicker" Disabled="@(string.IsNullOrEmpty(_startDate?.ToString()))"
                                    label="HH:MM">
                                    <PickerActions>
                                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _startTimePicker.ClearAsync())">Clear</MudButton>
                                            <MudButton OnClick="@(() => _startTimePicker.CloseAsync(false))">@Loc["cancel"]</MudButton>
                           
                                    </PickerActions>
                    </MudTimePicker>
                </div>
                <div class="d-flex align-items-center">
                    <MudDatePicker HelperText= "@Loc["endDate"]"  DateFormat="dd.MM.yyyy"
                                   ShowToolbar="false" Editable="true" AutoClose="true" @ref="_endDatePicker"
                                   DateChanged="@((date) => OnDateOrTimeChanged(date, false))"
                                   label="DD.MM.YYYY">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => ClearEndDateAndTime())">Clear</MudButton>
                            <MudButton OnClick="@(() => _endDatePicker.CloseAsync(false))">Cancel</MudButton>
                        </PickerActions>
                    </MudDatePicker>
                    <MudTimePicker HelperText= "@Loc["endTime"]" 
                                   Class="ml-2" TimeChanged="@((time) => OnDateOrTimeChanged(time ?? new TimeSpan(23, 59, 59), false))"
                                   AutoClose="true" @ref="_endTimePicker" Disabled="@(string.IsNullOrEmpty(_endDate?.ToString()))"
                                   label="HH:MM">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _endTimePicker.ClearAsync())">Clear</MudButton>
                            <MudButton OnClick="@(() => _endTimePicker.CloseAsync(false))">@Loc["cancel"]</MudButton>
                        </PickerActions>
                    </MudTimePicker>
                </div>
            </MudItem>

       
        <MudItem xs="12" md="4" lg="6" class="d-flex justify-content-end mt-4">
            <MudTextField T="string"
                          ValueChanged="@(s => OnSearch(s))"
                          Placeholder="@Loc["search"]"
                          Adornment="Adornment.Start"
                          Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="w-100" />
        </MudItem>
        
    </MudGrid>
</ToolBarContent>

        <HeaderContent>
            <MudTh>
                <MudTableSortLabel T="ApplicationAuditLogDto"
                               InitialDirection="SortDirection.Descending"
                                SortDirectionChanged="@((s) => SortByField(s, SortFieldLog.TimeStamp))">
                   @Loc["timeStamp"]
                </MudTableSortLabel>
            </MudTh>
        <MudTh>
            <MudTableSortLabel T="ApplicationAuditLogDto"
                               InitialDirection="SortDirection.Descending"
                               SortDirectionChanged="@((s) => SortByField(s, SortFieldLog.Level))">
                @Loc["level"]
            </MudTableSortLabel>
        </MudTh>
            <MudTh>
            <MudTableSortLabel T="ApplicationAuditLogDto"
                               InitialDirection="SortDirection.Descending"
                               SortDirectionChanged="@((s) => SortByField(s, SortFieldLog.ActionId))">
                @Loc["action"]
            </MudTableSortLabel>
            </MudTh>
        <MudTh>
            <MudTableSortLabel T="ApplicationAuditLogDto"
                               InitialDirection="SortDirection.Descending"
                               SortDirectionChanged="@((s) => SortByField(s, SortFieldLog.UserId))">
                @Loc["userID"]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="ApplicationAuditLogDto"
                               InitialDirection="SortDirection.Descending"
                               SortDirectionChanged="@((s) => SortByField(s, SortFieldLog.FromIp))">
                @Loc["IPAddress"]
            </MudTableSortLabel>
        </MudTh>
            <MudTh>
            <MudTableSortLabel T="ApplicationAuditLogDto"
                               InitialDirection="SortDirection.Descending"
                               SortDirectionChanged="@((s) => SortByField(s, SortFieldLog.ProductId))">
                @Loc["application"]
            </MudTableSortLabel>
            </MudTh>
        <MudTh>
            <MudTableSortLabel T="ApplicationAuditLogDto"
                               InitialDirection="SortDirection.Descending"
                               SortDirectionChanged="@((s) => SortByField(s, SortFieldLog.Message))">
                @Loc["message"]
            </MudTableSortLabel>
        </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="TimeStamp">@context.TimeStamp</MudTd>
        <MudTd DataLabel="Level">
            <MudText Color="@(context.Level == "Error" ? Color.Error : context.Level == "Warning" ? Color.Warning : Color.Info)">
                @context.Level
            </MudText>
            </MudTd>
            <MudTd DataLabel="Action">@context.Action</MudTd>
        <MudTd DataLabel="UserId">@context.UserId</MudTd>
            <MudTd DataLabel="IpAddress">@context.IpAddress</MudTd>
        <MudTd DataLabel="Application">@context.Application</MudTd>
        <MudTd DataLabel="Message">@context.Message</MudTd>
            
        </RowTemplate>
        <PagerContent>
            <MudPagination SelectedChanged="PageChanged" Count="_pageCount" Class="pa-4" />
        </PagerContent>
    </MudTable>


@code {

    private DateTime? _startDate;
    public DateTime? _endDate;
    private ApplicationRoleDto _activeRole = new();
    private ConfirmActionDialog confirmActionDialog = new();
    private MudTable<ApplicationAuditLogDto> _table = new();
    private List<ApplicationAuditLogDto> _logs = new();
    private List<ApplicationAuditLogDto> _logsFiltered = new();
    private int _currentPage { get; set; } = 1;
    private int _pageCount { get; set; }
    private int _pageSize { get; set; } = 8;
    private string _searchString = string.Empty;
    private Order _order = Order.Descending;
    private SortFieldLog _sortField = SortFieldLog.TimeStamp;
    private bool _loading { get; set; } = true;
    private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();

    private TimeSpan? _startTime { get; set; } = TimeSpan.Zero;
    private TimeSpan? _endTime { get; set; } = new TimeSpan(23, 59, 59);


    private MudDatePicker _startDatePicker = new MudDatePicker();
    private MudDatePicker _endDatePicker = new MudDatePicker();
    private MudTimePicker _startTimePicker = new MudTimePicker();
    private MudTimePicker _endTimePicker = new MudTimePicker();

    protected override async Task OnInitializedAsync()
    {
        await GetLogs(CancellationToken.None);
    }

    private async Task SortByField(SortDirection direction, SortFieldLog sortField)
    {
        if (direction != SortDirection.None)
        {
            _order = direction == SortDirection.Ascending ? Order.Ascending : Order.Descending;
            _sortField = sortField;
            await GetLogs(CancellationToken.None);
        }
    }

    private async Task GetLogs(CancellationToken cancellationToken)
    {
        _loading = true;

        string url = _searchString.Equals(string.Empty)
            ? $"api/Logging/?CurrentPage={_currentPage}&PageSize={_pageSize}&SortField={_sortField}&SortOrder={_order}&StartDate={Uri.EscapeDataString(_startDate?.ToString("yyyy-MM-dd HH:mm") ?? "")}&EndDate={Uri.EscapeDataString(_endDate?.ToString("yyyy-MM-dd HH:mm") ?? "")}"
            : $"api/Logging/?CurrentPage={_currentPage}&PageSize={_pageSize}&SortField={_sortField}&SortOrder={_order}&SearchText={_searchString}&StartDate={Uri.EscapeDataString(_startDate?.ToString("yyyy-MM-dd HH:mm") ?? "")}&EndDate={Uri.EscapeDataString(_endDate?.ToString("yyyy-MM-dd HH:mm") ?? "")}";

        var client = HttpClientFactory.CreateClient("CustomHttpClient");
        var response = await client.GetAsync(url, cancellationToken);

        try
        {
            if (response.IsSuccessStatusCode)
            {
                var logPagination = await response.Content.ReadFromJsonAsync<LogPagination>();

                if (logPagination?.Logs != null)
                {
                    var pageCount = (int)Math.Ceiling((decimal)logPagination.TotalItems / _pageSize);

                    _logs = logPagination.Logs;
                    _logsFiltered = _logs;
                    _pageCount = pageCount;
                    _currentPage = logPagination.CurrentPage;
                }
            }
            _loading = false;
            StateHasChanged();
        }
        catch (Exception) { };
    }

    private async Task PageChanged(int i)
    {
        _currentPage = i;
        await GetLogs(CancellationToken.None);
        _table.NavigateTo(i - 1);
    }

    private async Task OnSearch(string text)
    {
        _searchString = text;
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource = new CancellationTokenSource();
        var token = _cancellationTokenSource.Token;

        try
        {
            await GetLogs(token);
            _table.NavigateTo(0);
        }
        catch (Exception) { };
    }

    private async Task OnDateOrTimeChanged(object? value, bool isStart)
    {
        if (isStart)
        {
            // Asignar a startDate o startTime dependiendo del tipo
            if (value is DateTime date)
            {
                _startDate = date.Date + (_startTime ?? TimeSpan.Zero);
            }
            else if (value is TimeSpan time)
            {
                _startTime = time;
                _startDate = _startDate?.Date + _startTime;
            }
            else _startDate = null;
        }
        else
        {
            // Asignar a endDate o endTime dependiendo del tipo
            if (value is DateTime date)
            {
                _endDate = date.Date + (_endTime ?? new TimeSpan(23, 59, 59));
            }
            else if (value is TimeSpan time)
            {
                _endTime = time;
                _endDate = _endDate?.Date + _endTime;
            }
            else _endDate = null;
        }

        // Cancelar la operación anterior si aún está en curso
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource = new CancellationTokenSource();
        var token = _cancellationTokenSource.Token;

        try
        {
            // Llamar a GetLogs y resetear la tabla
            await GetLogs(token);
            _table.NavigateTo(0);
        }
        catch (Exception) { }
    }
    private void ClearStartDateAndTime()
    {
        //Limpiar los seleccionadores de fecha y hora
        _startDatePicker.ClearAsync();  //Limpiar el selector de fecha
        _startTimePicker.ClearAsync();  //Limpiar el selector de tiempo

        
    }
    private void ClearEndDateAndTime()
    {
        //impiar los seleccionadores de fecha y hora
        _endDatePicker.ClearAsync();  //Limpia el selector de fecha
        _endTimePicker.ClearAsync();  //Limpia el selector de tiempo

    }
   
}