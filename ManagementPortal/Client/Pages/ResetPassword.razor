@page "/resetPassword"


@using Dialogs
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using ManagementPortal.Shared.Models
@using ManagementPortal.Shared.Constants
@using ManagementPortal.Shared.Dtos

@inject IHttpClientFactory HttpClientFactory
@inject Services.CustomAuthStateProvider CustomAuthStateProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IStringLocalizer<AppLocalization> Loc

@if (_validtoken && _pass2fa)
{
    <MudPaper Height="100vh" Width="100vw" Class="align-content-center" Elevation="0">
    <MudGrid Justify="Justify.Center">
        <MudItem lg="4" md="6" sm="8">
            <MudPaper Class="pa-4" Elevation="2" Outlined="true">
                <EditForm Model="@resetModel" OnValidSubmit="OnValidSubmit" class="mud-height-full">
                    <DataAnnotationsValidator />
                    <MudStack Class="mud-height-full" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.h3" Class="pl-16 mt-8 mb-16" Style="font-weight: 500;">@Loc["resetPassword"]</MudText>
                        <MudStack Class="px-16">
                                <MudTextField HelperText=@Loc["enterNewPassowrd"] InputType="@PasswordInput" Adornment="Adornment.End"
                                          AdornmentIcon="@PasswordInputIcon" Class="mt-3"
                                          OnAdornmentClick="ButtonTestclick"
                                          @bind-Value="resetModel.NewPassword" For="@(() => resetModel.NewPassword)" />

                            <MudTextField @bind-Value="resetModel.ConfirmNewPassword" For="@(() => resetModel.ConfirmNewPassword)"
                                              HelperText=@Loc["confirmNewPasswordRes"]
                                          Variant="Variant.Text" InputType="@PasswordInput"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@PasswordInputIcon" Class="mt-3"
                                          OnAdornmentClick="ButtonTestclick"
                                          AdornmentAriaLabel="Show Password" />
                        </MudStack>
                        <MudStack Class="align-self-end pt-8">
                            <CustomButton ButtonType="ButtonType.Submit"
                                          Variant="Variant.Outlined"
                                          Color="Color.Primary"
                                          Width="150"
                                          Waiting="_waiting"
                                          Text="@Loc["confirm"]"
                                          Class="ml-auto custom-button" />
                        </MudStack>
                    </MudStack>
                </EditForm>
            </MudPaper>
            <MudStack Class="mt-4">
                <UserPreferences />
            </MudStack>
        </MudItem>
    </MudGrid>
    </MudPaper>
}

@code {
    private string? codigo;
    private string? username;
    private HttpClient _httpClient = new();
    private ConfirmActionDialog _confirmActionDialog = new();
    private bool _validtoken = false;
    private bool _pass2fa = false;
    ResetPasswordRequest resetModel = new ResetPasswordRequest();
    InputType PasswordInput = InputType.Password;
    private string _method { get; set; } = string.Empty;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool _waiting { get; set; } = false;
    bool isShow;


    protected override async void OnInitialized()
    {
        parseURL();

        _httpClient = HttpClientFactory.CreateClient("CustomHttpClient");
        _httpClient.DefaultRequestHeaders.Add("product", Products.ManagementPortal.ToString());
        var encodedToken = Uri.EscapeDataString(codigo ?? "");
        var response = await _httpClient.PostAsync($"api/Account/ValidateResetPasswordToken?username={username}&codigo={encodedToken}", null);

        if (response.IsSuccessStatusCode)
        {
            _validtoken = true;
            var result = await response.Content.ReadFromJsonAsync<AuthenticationResult>();
            if (result != null && result.TwoFactorMethods.Count != 0)
            {
                if (result.TwoFactorMethods.Count == 2)
                {
                    var parametersTwoFactorDialog = new DialogParameters
                    {
                        { "MethodSend", new EventCallback<string>(this, OnMethodSend) }
                    };

                    DialogOptions optionsTwoFactorDialog = new()
                        {
                            NoHeader = true,
                            CloseOnEscapeKey = false,
                            BackdropClick = false
                        };
                    var twoFactorDialog = await DialogService
                        .ShowAsync<TwoFactorAuthSelectDialog>("", parametersTwoFactorDialog, optionsTwoFactorDialog);
                }
                else
                {
                    var method = result.TwoFactorMethods.FirstOrDefault();
                    _method = method ?? string.Empty;

                    if (_method.Equals("Email"))
                    {
                        response = await _httpClient.PostAsync($"api/Account/SendCodeEmail/{username}/{encodedToken}", null);
                    }

                    DialogParameters parametersTwoFactorDialog = new DialogParameters
                    {
                        { "Method", method },
                        { "Username", username },
                        {"ResetToken", encodedToken }
                    };

                    DialogOptions optionsTwoFactorDialog = new()
                        {
                            NoHeader = true,
                            CloseOnEscapeKey = false,
                            BackdropClick = false
                        };
                    var dialogWaiting = await DialogService
                        .ShowAsync<TwoFactorResetPassAuthDialog>("", parametersTwoFactorDialog, optionsTwoFactorDialog);
                    var result2fa = await dialogWaiting.Result;

                    if (result2fa!=null)
                    {
                        _pass2fa = result2fa.Data as bool? ?? false;
                        if (_pass2fa == false)
                        {
                            DialogParameters parametersError = new DialogParameters
                                {
                                    { "Message", Loc["2faErrorRedirectLogin"].Value },
                                    { "Color", Color.Primary },
                                    { "Icon", Icons.Material.Filled.Error },
                                    { "ShowCancel", false},
                                    { "CallBackOk", new EventCallback(this, RedirectLogin)}
                                };
                            DialogOptions optionsError = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
                            var dialogError = await DialogService.ShowAsync<ConfirmActionDialog>("", parametersError, optionsError);
                        };

                        StateHasChanged();
                    }
                    else
                    {
                        _pass2fa = false;
                        DialogParameters parametersError = new DialogParameters
                            {
                                { "Message", Loc["2faErrorRedirectLogin"].Value },
                                { "Color", Color.Primary },
                                { "Icon", Icons.Material.Filled.Error },
                                { "ShowCancel", false},
                                { "CallBackOk", new EventCallback(this, RedirectLogin)}
                            };
                        DialogOptions optionsError = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
                        var dialogError = await DialogService.ShowAsync<ConfirmActionDialog>("", parametersError, optionsError);
                        StateHasChanged();
                    }
                }
            }
            else if (result == null)
            {
                DialogParameters parametersError = new DialogParameters
                    {
                        { "Message", Loc["errorRedirectLogin"].Value },
                        { "Color", Color.Primary },
                        { "Icon", Icons.Material.Filled.Error },
                        { "ShowCancel", false},
                        { "CallBackOk", new EventCallback(this, RedirectLogin)}
                    };
                DialogOptions optionsError = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
                var dialogError = await DialogService.ShowAsync<ConfirmActionDialog>("", parametersError, optionsError);

            }
            else
            {
                _pass2fa = true;
                StateHasChanged();

            }
        }
        else
        {
            await ShowUnauthorizedDialog();
        }
    }
    private async Task RedirectLogin()
    {
        var authenticationState = await CustomAuthStateProvider.GetAuthenticationStateAsync();
        bool isAuthenticated = authenticationState.User.Identity?.IsAuthenticated ?? false;
        if (isAuthenticated)
        {
            await CustomAuthStateProvider.Logout();
        }
        
        NavigationManager.NavigateTo($"/",true);
    }
    private async Task ShowUnauthorizedDialog()
    {
        DialogParameters parametersError = new DialogParameters
                {
                    { "Message", Loc["notAllowedResetPassword"].Value },
                    { "Color", Color.Primary },
                    { "Icon", Icons.Material.Filled.DoNotDisturb },
                    { "ShowCancel", false},
                    { "CallBackOk", new EventCallback(this, RedirectLogin)}
                };

        DialogOptions optionsError = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
        var dialogError = await DialogService.ShowAsync<ConfirmActionDialog>("", parametersError, optionsError);
    }
    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    private void parseURL()
    {
        // Obtiene la URL completa
        var uri = new Uri(NavigationManager.Uri);

        // Divide la cadena de consulta manualmente
        var queryParameters = uri.Query.TrimStart('?').Split('&', StringSplitOptions.RemoveEmptyEntries);

        foreach (var param in queryParameters)
        {
            var keyValue = param.Split('=', 2);
            if (keyValue.Length == 2)
            {
                var key = keyValue[0];
                var value = Uri.UnescapeDataString(keyValue[1]);

                if (key == "codigo")
                {
                    codigo = value;
                }
                else if (key == "username")
                {
                    username = value;
                }
            }
        }
    }
    private async Task OnValidSubmit(EditContext context)
    {

        _waiting = true;
        var encodedToken = Uri.EscapeDataString(codigo ?? "");
        ResetPasswordRequest ResetPasswordRequest = new ResetPasswordRequest
            {
                Username = username ?? "",
                NewPassword = resetModel.NewPassword,
                ConfirmNewPassword= resetModel.ConfirmNewPassword,
                Code = encodedToken
            };


        var response = await _httpClient.PostAsJsonAsync("api/Account/ResetPassword", ResetPasswordRequest);

        _waiting = false;

        if (response.IsSuccessStatusCode)
        {
            string _msgConfirmRecoverPassword = Loc["resetPasswordSuccess"];
            DialogParameters parameters = new DialogParameters
            {
                { "Message", _msgConfirmRecoverPassword},
                { "Color", Color.Success },
                { "Icon", Icons.Material.Filled.CheckCircleOutline},
                {"ShowCancel",false },
                { "CallBackOk", new EventCallback(this, RedirectLogin) }
            };

            DialogOptions _options = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
            var dialog = await DialogService.ShowAsync<ConfirmActionDialog>("", parameters, _options);
        }
        else
        {
            string _msgConfirmRecoverPassword = Loc["resetPasswordError"];
            DialogParameters parameters = new DialogParameters
            {
                { "Message", _msgConfirmRecoverPassword},
                { "Color", Color.Error },
                { "Icon", Icons.Material.Filled.CheckCircleOutline},
                { "CallBackOk", new EventCallback(this, RedirectLogin) }
            };

            DialogOptions _options = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
            var dialog = await DialogService.ShowAsync<ConfirmActionDialog>("", parameters, _options);
        }

    }

    private async Task OnMethodSend(string method)
    {
        var encodedToken = Uri.EscapeDataString(codigo ?? "");
        if (method.Equals("Email"))
        {
            var response = await _httpClient.PostAsync($"api/Account/SendCodeEmail/{username}/{encodedToken}", null);
        }

        DialogParameters parametersTwoFactorDialog = new DialogParameters
                    {
                        { "Method", method },
                        { "Username", username },
                        {"ResetToken", encodedToken }
                    };

        DialogOptions optionsTwoFactorDialog = new()
            {
                NoHeader = true,
                CloseOnEscapeKey = false,
                BackdropClick = false
            };
        var dialogWaiting = await DialogService
            .ShowAsync<TwoFactorResetPassAuthDialog>("", parametersTwoFactorDialog, optionsTwoFactorDialog);
        var result2fa = await dialogWaiting.Result;

        if (result2fa != null)
        {
            _pass2fa = result2fa.Data as bool? ?? false;
            if (_pass2fa == false)
            {
                DialogParameters parametersError = new DialogParameters
                    {
                        { "Message", Loc["2faErrorRedirectLogin"].Value },
                        { "Color", Color.Primary },
                        { "Icon", Icons.Material.Filled.Error },
                        { "ShowCancel", false},
                        { "CallBackOk", new EventCallback(this, RedirectLogin)}
                    };
                DialogOptions _options = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
                var dialog = await DialogService.ShowAsync<ConfirmActionDialog>("", parametersError, _options);
            };
            StateHasChanged();
        }
        else
        {
            _pass2fa = false;
            DialogParameters parametersError = new DialogParameters
                    {
                        { "Message", Loc["2faErrorRedirectLogin"].Value },
                        { "Color", Color.Primary },
                        { "Icon", Icons.Material.Filled.Error },
                        { "ShowCancel", false},
                        { "CallBackOk", new EventCallback(this, RedirectLogin)}
                    };
            DialogOptions _options = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
            var dialog = await DialogService.ShowAsync<ConfirmActionDialog>("", parametersError, _options);
            StateHasChanged();
        }
    }
     
    
    
}