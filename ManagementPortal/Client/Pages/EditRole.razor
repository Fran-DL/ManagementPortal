@page "/edit_role/{Product}/{RoleName}"
@page "/view_role/{Product}/{RoleName}"
@attribute [Authorize(Roles = "EditRole")]


@using ManagementPortal.Client.Services
@using Microsoft.AspNetCore.Authorization
@using ManagementPortal.Shared.Dtos
@using ManagementPortal.Shared.Constants
@using ManagementPortal.Shared.Models
@using System.Net.Http.Json
@using Dialogs

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IStringLocalizer<AppLocalization> Loc

<MudPaper Class="pa-2 rounded-lg flex-grow-1">
    <EditForm Model="@model" OnValidSubmit="PutRole" class="mud-height-full">
        @if (!_disabled)
        {
            <DataAnnotationsValidator />
        }
        <MudStack Class="mud-height-full">
            <MudStack Class="mud-height-full" Justify="Justify.SpaceBetween">
                <MudGrid>
                    <MudItem md="6" lg="6">
                        <MudTextField @bind-Value="model.Name"
                        For="@(() => model.Name)"
                                      Disabled="_disabled"
                        HelperText=@Loc["enterRoleName"]
                        Variant="Variant.Outlined"
                        Clearable="true" />
                    </MudItem>
                    <MudItem md="6" lg="6">
                        <MudSelect T="string"
                        Disabled="true"
                        Variant="Variant.Outlined"
                        Value="@Product?.ToString()"
                        HelperText=@Loc["selectApplication"]>
                        </MudSelect>
                    </MudItem>
                    <MudItem md="12" lg="12">
                        <PermissionsSelector InitialPermissions="_permissions"
                                             Disable="_disabled"
                        PermissionsSend="OnPermissionsSend"
                        Product="model.ApplicationManagment" />
                    </MudItem>
                </MudGrid>
                <MudStack Row="true" Class="align-self-end">
                    <MudButton ButtonType="ButtonType.Button"
                    Class="custom-button"
                               Style="@($"visibility: {(_disabled ? "hidden" : "visible")};")"
                    Variant="Variant.Outlined"
                    OnClick="CancelEdit"
                    Color="Color.Error">
                        @Loc["cancel"]
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Submit"
                    Class="custom-button"
                    Variant="Variant.Outlined"
                    Color="Color.Primary">
                        @(_disabled ? @Loc["edit"] : @Loc["save"])
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudStack>
    </EditForm>
</MudPaper>

@code {
    [Parameter]
    public string? RoleName { get; set; }

    [Parameter]
    public string? Product { get; set; }

    private int _maxLength = 256; // Largo máximo para el nombre del rol
    private ConfirmActionDialog _confirmActionDialog = new();
    private bool IsOnEditRole => NavigationManager.ToBaseRelativePath(NavigationManager.Uri).StartsWith("edit_role/");
    private bool IsOnViewRole => NavigationManager.ToBaseRelativePath(NavigationManager.Uri).StartsWith("view_role/");

    private ApplicationRoleDto model = new();
    private ApplicationRoleDto originalModel = new();
    private List<ApplicationPermissionDto> _permissions = new();

    private bool _disabled = false;

    private void CancelEdit()
    {
        model = new ApplicationRoleDto(originalModel);
        _permissions = model?.Permissions?.ToList() ?? new List<ApplicationPermissionDto>();
        _disabled = true;
        StateHasChanged();

        NavigationManager.NavigateTo("/roles");
    }

    private void OnPermissionsSend(List<ApplicationPermissionDto> permissions)
    {
        _permissions = permissions;
    }

    protected override async Task OnInitializedAsync()
    {
        model = new();
        _disabled = !IsOnEditRole;
        var client = HttpClientFactory.CreateClient("CustomHttpClient");
        var response = await client.GetAsync($"api/Roles/name/{Product}/{RoleName}");

        if (response.IsSuccessStatusCode)
        {
            model = await response.Content.ReadFromJsonAsync<ApplicationRoleDto>()
                ?? new ApplicationRoleDto();
            _permissions = model.Permissions?.ToList() ?? new List<ApplicationPermissionDto>();
            originalModel = new ApplicationRoleDto(model);
        }
        else
        {
            NavigationManager.NavigateTo("/not_found");
        }
    }

    public async Task PutRole()
    {
        if (_disabled)
        {
            _disabled = false;
        }
        else
        {
            _disabled = false;
            
            if (model.Name.Length > _maxLength)
            {
                DialogParameters parameters = new DialogParameters
            {
                { "Message", Loc["msgRoleNameLenghtError"].Value },
                { "Color", Color.Primary },
                { "Icon", Icons.Material.Filled.Error },
                { "ShowCancel", false},
                { "CallBackOk", new EventCallback(this, () => _confirmActionDialog.Close())}
            };

                DialogOptions options = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
                var dialogError = await DialogService.ShowAsync<ConfirmActionDialog>("", parameters, options);

                if (dialogError.Dialog != null)
                {
                    _confirmActionDialog = (ConfirmActionDialog)dialogError.Dialog;
                }
                return;
            }

            DialogOptions optionsLoading = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
            DialogParameters parametersWaiting = new DialogParameters
            {
                { "Message", Loc["msgModifyingRole"].Value }
            };

            var dialogWaiting = await DialogService.ShowAsync<LoadingDialog>("", parametersWaiting, optionsLoading);

            model.Permissions = _permissions;

            var client = HttpClientFactory.CreateClient("CustomHttpClient");

            HttpResponseMessage response = new();
            var idRol = model.Id;
            var aplicacion = model.ApplicationManagment;
            response = await client.PutAsJsonAsync($"api/Roles/{aplicacion}/{model.Id}", model);

            DialogService.Close(dialogWaiting);

            if (response.IsSuccessStatusCode)
            {
                originalModel = new ApplicationRoleDto(model);
                DialogParameters parametersOk = new DialogParameters
                {
                    { "Message", Loc["msgSuccesfulRoleModification"].Value }
                };

                DialogOptions optionsOk = new() { NoHeader = true };

                var dialog = await DialogService.ShowAsync<SuccessDialog>("", parametersOk, optionsOk);
                var result = await dialog.Result;

                if (result != null)
                {
                    NavigationManager.NavigateTo("/roles");
                }
            }
            else
            {
                model = new ApplicationRoleDto(originalModel);
                _permissions = model?.Permissions?.ToList() ?? new List<ApplicationPermissionDto>();

                StateHasChanged();
                var message = await response.Content.ReadAsStringAsync();
                DialogParameters parametersError = new DialogParameters
                {
                    { "Message", message }
                };

                DialogOptions optionsError = new() { NoHeader = true };
                await DialogService.ShowAsync<ErrorDialog>("", parametersError, optionsError);
            }

            _disabled = true;
        }
    }
}
