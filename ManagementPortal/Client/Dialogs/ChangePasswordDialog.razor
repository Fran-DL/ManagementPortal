@using ManagementPortal.Shared.Dtos
@using ManagementPortal.Shared.Constants
@using Services

@inject IHttpClientFactory HttpClientFactory
@inject CustomAuthStateProvider CustomAuthStateProvider
@inject IStringLocalizer<AppLocalization> Loc
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudDialog Class="custom-dialog" Style="height: fit-content;">
    <DialogContent>
        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudIcon Icon="@Icons.Material.Filled.Password" Color="Color.Info" Style="font-size: 6rem;" Class="my-2" />
            <MudText Align="Align.Center">
                @if (Password.Length == 0)
                {
                    <text>Cambio de contraseña</text>
                }
                else{ 
                    @Loc["passwordIniciateMessage"]
                }
            </MudText>
            <MudDivider />
            <EditForm class="mud-width-full mud-height-full" EditContext="_editContext">
                <DataAnnotationsValidator />
                <MudStack Class="mud-width-full px-4 mud-height-full">
                    @if (Password.Length == 0)
                    {
                        <MudTextField ShrinkLabel FullWidth="true" HelperText=@Loc["currentPassword"] InputType="InputType.Password"
                                      Variant="Variant.Outlined"
                                      @bind-Value="_model.CurrentPassword" For="@(() => _model.CurrentPassword)" />
                    }
                    <MudTextField ShrinkLabel FullWidth="true" HelperText=@Loc["newPassword"] InputType="InputType.Password"
                                  Variant="Variant.Outlined"
                                  @bind-Value="_model.NewPassword" For="@(() => _model.NewPassword)" />
                    <MudTextField ShrinkLabel FullWidth="true" HelperText=@Loc["confirmNewPassword"] InputType="InputType.Password"
                                  Variant="Variant.Outlined"
                                  @bind-Value="_model.ConfirmNewPassword" For="@(() => _model.ConfirmNewPassword)" />
                </MudStack>
            </EditForm>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <CustomButton Color="Color.Primary" OnClick="Cancel" Width="100" Text="@Loc["cancel"]" />
        <CustomButton Text="@Loc["confirm"]" Color="Color.Primary" Waiting="_waiting" Width="100" OnClick="SubmitForm" />
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public string Username { get; set; } = string.Empty;

    [Parameter]
    public string Password { get; set; } = string.Empty;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = new MudDialogInstance();

    private ConfirmActionDialog _customDialog = new();
    private EditContext _editContext = null!;
    private ChangePasswordRequest _model = new();
    private bool _waiting = false;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_model);
    }

    public async Task SubmitForm()
    {
        _model.Username = Username;
        _model.CurrentPassword = Password.Length == 0 ? _model.CurrentPassword : Password;

        if (_editContext.Validate())
        {
            _waiting = true;

            var client = HttpClientFactory.CreateClient("CustomHttpClient");
            client.DefaultRequestHeaders.Add("product", Products.ManagementPortal.ToString());
            var response = await client.PutAsJsonAsync("api/Users/changePassword", _model);

            _waiting = false;

            if (response.IsSuccessStatusCode)
            {
                MudDialog.Close();

                DialogParameters parameters = new DialogParameters
                {
                    { "Message", Loc["msgSuccessfulPassword"].Value },
                    { "Color", Color.Primary },
                    { "Icon", Icons.Material.Filled.CheckCircleOutline },
                    { "ShowCancel", false},
                    { "CallBackOk", new EventCallback(this,() => Login()) }
                };

                DialogOptions options = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
                var dialog = await DialogService.ShowAsync<ConfirmActionDialog>("", parameters, options);

                if (dialog.Dialog != null)
                {
                    _customDialog = (ConfirmActionDialog)dialog.Dialog;
                }
            }
            else
            {
                DialogParameters parameters = new DialogParameters
                {
                    { "Message", Loc["msgErrorChangePassword"].Value },
                    { "Color", Color.Primary },
                    { "Icon", Icons.Material.Filled.Error },
                    { "CallBackOk", new EventCallback(this,() => _customDialog.Close()) }
                };

                DialogOptions options = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
                var dialog = await DialogService.ShowAsync<ConfirmActionDialog>("", parameters, options);

                if (dialog.Dialog != null)
                {
                    _customDialog = (ConfirmActionDialog)dialog.Dialog;
                }
            }
        }

        _editContext.GetValidationMessages();
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Login()
    {
        var _msgRedirect = Loc["redirectMessage"].Value;
        DialogParameters parametersDialog = new DialogParameters
            {
                { "Message",_msgRedirect },
                { "Waiting", true },
                { "CallBackOk", new EventCallback() }
            };

        _customDialog.UpdateParameters(parametersDialog);

        LoginUserRequest loginUserRequest = new LoginUserRequest
            {
                Username = _model.Username,
                Password = _model.NewPassword
            };

        var client = HttpClientFactory.CreateClient("CustomHttpClient");
        client.DefaultRequestHeaders.Add("product", Products.ManagementPortal.ToString());
        var response = await client.PostAsJsonAsync("api/Account/login", loginUserRequest);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<AuthenticationResult>();
            if (result!=null)
            {
                await CustomAuthStateProvider.NotifyUserAuthentication(result);
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                await ShowError(Loc["couldNotIngressSystem"].Value);
            }
        }
        else
        {
            string errorMessage = await response.Content.ReadAsStringAsync();
            await ShowError(errorMessage);
        }
    }

    private async Task ShowError(string error)
    {
        DialogParameters parameters = new DialogParameters
                {
                    { "Message", error },
                    { "Color", Color.Primary },
                    { "Icon", Icons.Material.Filled.Error },
                    { "CallBackOk", new EventCallback(this,() => _customDialog.Close()) }
                };

        DialogOptions options = new() { NoHeader = true, CloseOnEscapeKey = false, BackdropClick = false };
        var dialog = await DialogService.ShowAsync<ConfirmActionDialog>("", parameters, options);

        if (dialog.Dialog != null)
        {
            _customDialog = (ConfirmActionDialog)dialog.Dialog;
        }
    }
}