<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidRole" xml:space="preserve">
    <value>The user does not have the required permission</value>
  </data>
  <data name="UserNotFound" xml:space="preserve">
    <value>User not found</value>
  </data>
  <data name="AssignRoleError" xml:space="preserve">
    <value>Error assigning roles to user</value>
  </data>
  <data name="CreateUserError" xml:space="preserve">
    <value>Error creating user</value>
  </data>
  <data name="UsernameRequired" xml:space="preserve">
    <value>The 'username' parameter is required</value>
  </data>
  <data name="UserDeleted" xml:space="preserve">
    <value>User successfully disabled</value>
  </data>
  <data name="NameRequired" xml:space="preserve">
    <value>The 'Name' parameter is required</value>
  </data>
  <data name="LastNameRequired" xml:space="preserve">
    <value>The 'Last Name' parameter is required</value>
  </data>
  <data name="EmailExists" xml:space="preserve">
    <value>The email entered is in use</value>
  </data>
  <data name="EmailRequired" xml:space="preserve">
    <value>The 'Email' parameter is required</value>
  </data>
  <data name="ModifyFailed" xml:space="preserve">
    <value>The modification could not be made. Please retry.</value>
  </data>
  <data name="IdRequired" xml:space="preserve">
    <value>The 'Id' parameter is required</value>
  </data>
  <data name="PasswordChanged" xml:space="preserve">
    <value>The password has been changed successfully</value>
  </data>
  <data name="UserIsDeleted" xml:space="preserve">
    <value>User is disabled</value>
  </data>
  <data name="UpdateProductUser_completed" xml:space="preserve">
    <value>Process completed</value>
  </data>
  <data name="Produced_error" xml:space="preserve">
    <value>produced an error</value>
  </data>
  <data name="ProductToDeleteNotFound" xml:space="preserve">
    <value>The product to delete was not found</value>
  </data>
  <data name="DeleteSucces" xml:space="preserve">
    <value>was successfully deleted</value>
  </data>
  <data name="FailAPIrequest" xml:space="preserve">
    <value>failed in the API request</value>
  </data>
  <data name="NotUpdateDB" xml:space="preserve">
    <value>could not be updated in the database</value>
  </data>
  <data name="AddSuccess" xml:space="preserve">
    <value>was successfully added</value>
  </data>
  <data name="NotDeleteDB" xml:space="preserve">
    <value>could not be deleted from the database</value>
  </data>
  <data name="ProductDeleteBefore" xml:space="preserve">
    <value>the product cannot be added because the user was previously deleted</value>
  </data>
  <data name="UserEmailAlreadyExists" xml:space="preserve">
    <value>A user with email {0} already exists</value>
  </data>
  <data name="UserNameAlreadyExists" xml:space="preserve">
    <value>A user with userName {0} already exists</value>
  </data>
  <data name="FileNotValid" xml:space="preserve">
    <value>File not valid</value>
  </data>
  <data name="ImageNotUpdated" xml:space="preserve">
    <value>The user image could not be updated</value>
  </data>
  <data name="ImageUpdateSuccess" xml:space="preserve">
    <value>Image updated successfully</value>
  </data>
  <data name="ImageNotFound" xml:space="preserve">
    <value>Image or user not found</value>
  </data>
  <data name="RemoveRolesFromUserError" xml:space="preserve">
    <value>The user's current roles could not be deleted.</value>
  </data>
  <data name="AddRolesUserError" xml:space="preserve">
    <value>The new roles could not be assigned to the user.</value>
  </data>
  <data name="modifySuccess" xml:space="preserve">
    <value>User successfully edited</value>
  </data>
  <data name="UserProduct_externalIds" xml:space="preserve">
    <value>ExternalIds have not been send</value>
  </data>
  <data name="NoAccessProduct" xml:space="preserve">
    <value>You do not have access to this product</value>
  </data>
  <data name="DeleteYourselfInvalid" xml:space="preserve">
    <value>It is not possible to delete your own account.</value>
  </data>
  <data name="UserNotAuth" xml:space="preserve">
    <value>"User not authenticated.</value>
  </data>
</root>